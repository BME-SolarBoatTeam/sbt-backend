generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  state     Boolean  @default(false)
  createdAt DateTime @default(now())
  avatarURL String?

  Post         Post[]
  Group        Group[]
  UserRole     UserRole[]
  GroupRole    GroupRole[]
  SubGroupRole SubGroupRole[]
  RefreshToken RefreshToken[]

  @@map("users")
}

model Role {
  id   String @id @default(cuid())
  name String @unique

  UserRole UserRole[]

  @@map("roles")
}

model UserRole {
  role Role @relation(fields: [roleID], references: [id])
  user User @relation(fields: [userID], references: [id])

  roleID String
  userID String

  @@id([roleID, userID])
  @@map("user_roles")
}

model SponsorGroup {
  id   String @id @default(cuid())
  name String @unique

  Sponsor Sponsor[]

  @@map("sponsor_groups")
}

model Sponsor {
  id             String @id @default(cuid())
  name           String @unique
  logoUrl        String
  websiteUrl     String
  sponsorGroupID String

  sponsorGroup SponsorGroup @relation(fields: [sponsorGroupID], references: [id], onDelete: Cascade)

  @@map("sponsors")
}

model SubGroup {
  id          String @id @default(cuid())
  name        String @unique
  description String
  groupId     String

  Group            Group              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  SubGroupPosition SubGroupPosition[]

  @@map("sub_groups")
}

model SubGroupPosition {
  id         String @id @default(cuid())
  name       String @unique
  subGroupID String

  subGroup     SubGroup       @relation(fields: [subGroupID], references: [id], onDelete: Cascade)
  SubGroupRole SubGroupRole[]

  @@map("subgroup_positions")
}

model SubGroupRole {
  subGroupID         String
  userId             String
  SubGroupPositionID String

  User             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  SubGroupPosition SubGroupPosition @relation(fields: [SubGroupPositionID], references: [id], onDelete: Cascade)

  @@id([userId, subGroupID])
  @@map("sub_group_roles")
}

model Group {
  id          String @id @default(cuid())
  name        String @unique
  description String
  leaderID    String

  leader    User            @relation(fields: [leaderID], references: [id], onDelete: Cascade)
  SubGroup  SubGroup[]
  Position  GroupPosition[]
  GroupRole GroupRole[]

  @@map("groups")
}

model GroupPosition {
  id      String @id @default(cuid())
  name    String @unique
  groupID String

  group     Group       @relation(fields: [groupID], references: [id], onDelete: Cascade)
  GroupRole GroupRole[]

  @@map("group_positions")
}

model GroupRole {
  userID     String
  groupID    String
  positionID String

  user     User          @relation(fields: [userID], references: [id], onDelete: Cascade)
  group    Group         @relation(fields: [groupID], references: [id], onDelete: Cascade)
  position GroupPosition @relation(fields: [positionID], references: [id], onDelete: Cascade)

  @@id([userID, groupID])
  @@map("group_roles")
}

model Post {
  id            String    @id @default(cuid())
  slug          String    @unique
  title         String
  content       String
  shortDesc     String
  publishedById String
  publishedAt   DateTime  @default(now())
  bannerURL     String?
  modifiedAt    DateTime?

  user User @relation(fields: [publishedById], references: [id])

  @@map("posts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
